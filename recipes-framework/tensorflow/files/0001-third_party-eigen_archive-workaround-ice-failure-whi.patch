From 1fab0804691439297a4f776303f28aea65d8551c Mon Sep 17 00:00:00 2001
From: Hongxu Jia <hongxu.jia@windriver.com>
Date: Mon, 28 Dec 2020 16:31:40 +0800
Subject: [PATCH] third_party/eigen_archive:workaround ice failure while
 building from source with gcc 7.3.1

The root cause is gcc ice issue:
https://gcc.gnu.org/bugzilla/show_bug.cgi?id=89752

But we could not patch on native gcc,so try to workaround,
Refer: https://github.com/tensorflow/tensorflow/issues/25323

Upstream-Status: Inappropriate [wr-installer specific]

Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
---
 third_party/eigen3/gpu_packet_math.patch | 129 ++++++++++++++++++-----
 1 file changed, 102 insertions(+), 27 deletions(-)

diff --git a/third_party/eigen3/gpu_packet_math.patch b/third_party/eigen3/gpu_packet_math.patch
index c0f466c24d3..ee873459292 100644
--- a/third_party/eigen3/gpu_packet_math.patch
+++ b/third_party/eigen3/gpu_packet_math.patch
@@ -1,32 +1,31 @@
-diff -ru a/Eigen/src/Geometry/arch/Geometry_SSE.h b/Eigen/src/Geometry/arch/Geometry_SSE.h
---- a/Eigen/src/Geometry/arch/Geometry_SSE.h
-+++ b/Eigen/src/Geometry/arch/Geometry_SSE.h
-@@ -33,13 +33,14 @@
-     Packet4f b = be.template packet<BAlignment,Packet4f>(0);
-     Packet4f s1 = pmul(vec4f_swizzle1(a,1,2,0,2),vec4f_swizzle1(b,2,0,1,2));
-     Packet4f s2 = pmul(vec4f_swizzle1(a,3,3,3,1),vec4f_swizzle1(b,0,1,2,1));
--    pstoret<float,Packet4f,ResAlignment>(
--              &res.x(),
--              padd(psub(pmul(a,vec4f_swizzle1(b,3,3,3,3)),
--                                    pmul(vec4f_swizzle1(a,2,0,1,0),
--                                               vec4f_swizzle1(b,1,2,0,0))),
--                         pxor(mask,padd(s1,s2))));
--    
-+    pstoret<float, Packet4f, ResAlignment>(
-+        &res.x(),
-+        padd<Packet4f>(
-+            psub<Packet4f>(pmul<Packet4f>(a, vec4f_swizzle1(b, 3, 3, 3, 3)),
-+                           pmul<Packet4f>(vec4f_swizzle1(a, 2, 0, 1, 0),
-+                                          vec4f_swizzle1(b, 1, 2, 0, 0))),
-+            pxor<Packet4f>(mask, padd(s1, s2))));
-+
-     return res;
-   }
- };
-diff -ru a/Eigen/src/Core/GenericPacketMath.h b/Eigen/src/Core/GenericPacketMath.h
+From f037b16a0fbcd8f4dc0b5a817e1c34ec58578ae0 Mon Sep 17 00:00:00 2001
+From: Hongxu Jia <hongxu.jia@windriver.com>
+Date: Tue, 8 Dec 2020 17:32:22 +0800
+Subject: [PATCH] 1. gpu_packet_math
+
+2. workaround ice failure while building from source with gcc 7.3.1
+
+The root cause is gcc ice issue:
+https://gcc.gnu.org/bugzilla/show_bug.cgi?id=89752
+
+But we could not patch on native gcc,so try to workaround,
+Refer: https://github.com/tensorflow/tensorflow/issues/25323
+
+Upstream-Status: Inappropriate [wr-installer specific]
+
+Signed-off-by: Hongxu Jia <hongxu.jia@windriver.com>
+---
+ Eigen/src/Core/GenericPacketMath.h            | 46 ++++++++-----------
+ Eigen/src/Geometry/arch/Geometry_SSE.h        | 15 +++---
+ .../Eigen/CXX11/src/Tensor/TensorImagePatch.h |  3 +-
+ .../Eigen/CXX11/src/Tensor/TensorReduction.h  | 10 ++--
+ 4 files changed, 37 insertions(+), 37 deletions(-)
+
+diff --git a/Eigen/src/Core/GenericPacketMath.h b/Eigen/src/Core/GenericPacketMath.h
+index fad9453..d8bbc76 100644
 --- a/Eigen/src/Core/GenericPacketMath.h
 +++ b/Eigen/src/Core/GenericPacketMath.h
-@@ -255,49 +255,43 @@
+@@ -255,49 +255,43 @@ EIGEN_DEVICE_FUNC inline std::complex<RealScalar> ptrue(const std::complex<RealS
    return std::complex<RealScalar>(b, b);
  }
  
@@ -96,3 +95,79 @@ diff -ru a/Eigen/src/Core/GenericPacketMath.h b/Eigen/src/Core/GenericPacketMath
  }
  
  /** \internal \returns the bitwise and of \a a and not \a b */
+diff --git a/Eigen/src/Geometry/arch/Geometry_SSE.h b/Eigen/src/Geometry/arch/Geometry_SSE.h
+index 108cc9f..43677f4 100644
+--- a/Eigen/src/Geometry/arch/Geometry_SSE.h
++++ b/Eigen/src/Geometry/arch/Geometry_SSE.h
+@@ -33,13 +33,14 @@ struct quat_product<Architecture::SSE, Derived, OtherDerived, float>
+     Packet4f b = be.template packet<BAlignment,Packet4f>(0);
+     Packet4f s1 = pmul(vec4f_swizzle1(a,1,2,0,2),vec4f_swizzle1(b,2,0,1,2));
+     Packet4f s2 = pmul(vec4f_swizzle1(a,3,3,3,1),vec4f_swizzle1(b,0,1,2,1));
+-    pstoret<float,Packet4f,ResAlignment>(
+-              &res.x(),
+-              padd(psub(pmul(a,vec4f_swizzle1(b,3,3,3,3)),
+-                                    pmul(vec4f_swizzle1(a,2,0,1,0),
+-                                               vec4f_swizzle1(b,1,2,0,0))),
+-                         pxor(mask,padd(s1,s2))));
+-    
++    pstoret<float, Packet4f, ResAlignment>(
++        &res.x(),
++        padd<Packet4f>(
++            psub<Packet4f>(pmul<Packet4f>(a, vec4f_swizzle1(b, 3, 3, 3, 3)),
++                           pmul<Packet4f>(vec4f_swizzle1(a, 2, 0, 1, 0),
++                                          vec4f_swizzle1(b, 1, 2, 0, 0))),
++            pxor<Packet4f>(mask, padd(s1, s2))));
++
+     return res;
+   }
+ };
+diff --git a/unsupported/Eigen/CXX11/src/Tensor/TensorImagePatch.h b/unsupported/Eigen/CXX11/src/Tensor/TensorImagePatch.h
+index 49d1004..b160105 100644
+--- a/unsupported/Eigen/CXX11/src/Tensor/TensorImagePatch.h
++++ b/unsupported/Eigen/CXX11/src/Tensor/TensorImagePatch.h
+@@ -543,7 +543,8 @@ struct TensorEvaluator<const TensorImagePatchOp<Rows, Cols, ArgType>, Device>
+     EIGEN_ALIGN_MAX typename internal::remove_const<CoeffReturnType>::type values[PacketSize];
+     EIGEN_UNROLL_LOOP
+     for (int i = 0; i < PacketSize; ++i) {
+-      values[i] = coeff(index+i);
++      Self::CoeffReturnType a = coeff(index+i);
++      values[i] = a;
+     }
+     PacketReturnType rslt = internal::pload<PacketReturnType>(values);
+     return rslt;
+diff --git a/unsupported/Eigen/CXX11/src/Tensor/TensorReduction.h b/unsupported/Eigen/CXX11/src/Tensor/TensorReduction.h
+index 0a65591..6145467 100644
+--- a/unsupported/Eigen/CXX11/src/Tensor/TensorReduction.h
++++ b/unsupported/Eigen/CXX11/src/Tensor/TensorReduction.h
+@@ -815,8 +815,10 @@ struct TensorReductionEvaluatorBase<const TensorReductionOp<Op, Dims, ArgType, M
+       const Index firstIndex = firstInput(index);
+       for (Index i = 0; i < PacketSize; ++i) {
+         Op reducer(m_reducer);
+-        values[i] = internal::InnerMostDimReducer<Self, Op>::reduce(*this, firstIndex + i * num_values_to_reduce,
++        Self::CoeffReturnType a = internal::InnerMostDimReducer<Self, Op>::reduce(*this, firstIndex + i * num_values_to_reduce,
+                                                                     num_values_to_reduce, reducer);
++        values[i] = a;
++
+       }
+     } else if (PreservingInnerMostDims) {
+       const Index firstIndex = firstInput(index);
+@@ -829,12 +831,14 @@ struct TensorReductionEvaluatorBase<const TensorReductionOp<Op, Dims, ArgType, M
+         return reducer.finalizePacket(accum);
+       } else {
+         for (int i = 0; i < PacketSize; ++i) {
+-          values[i] = coeff(index + i);
++          Self::CoeffReturnType a = coeff(index + i);
++          values[i] = a;
+         }
+       }
+     } else {
+       for (int i = 0; i < PacketSize; ++i) {
+-        values[i] = coeff(index + i);
++        Self::CoeffReturnType a = coeff(index + i);
++        values[i] = a;
+       }
+     }
+     PacketReturnType rslt = internal::pload<PacketReturnType>(values);
+-- 
+2.18.2
+
-- 
2.18.2

